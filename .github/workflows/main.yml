name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:

  # –¢–µ—Å—Ç—ã –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      - name: Run flake8 and django tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/
          python manage.py test

  # –¢–µ—Å—Ç—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Run frontend tests
        run: |
          cd frontend/
          npm run test

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É—à –±—ç–∫–µ–Ω–¥-–æ–±—Ä–∞–∑–∞ –Ω–∞ Docker Hub
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Backend)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–æ–±—Ä–∞–∑–∞ –Ω–∞ Docker Hub
  build_frontend_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Frontend)
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É—à gateway-–æ–±—Ä–∞–∑–∞ –Ω–∞ Docker Hub
  build_gateway_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Gateway)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push gateway Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  # –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Copy docker-compose.production.yml to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "/home/yc-user/kittygram"
      - name: Execute deployment via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/yc-user/kittygram
            sudo docker-compose -f docker-compose.production.yml pull
            sudo docker-compose -f docker-compose.production.yml down
            sudo docker-compose -f docker-compose.production.yml up -d
            sudo docker system prune -af
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py migrate

  # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "–î–µ–ø–ª–æ–π Kittygram —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ"
